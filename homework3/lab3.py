# -*- coding: utf-8 -*-
"""Lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ky_AlQavXGh58LbY4rIrbxIzGfTNUEs0

**Описание датасета:​** 

Данные о видеоиграх, выпущенных с 1985 по 2016.

Датасет содержит 2843 строки и следующие столбцы:

Название | Описание | Формат | Шкала | Проблема | Решение
--- | --- | --- | --- | --- | --- |
Name | название видеоигры | str | номинальная | не нужно использовать при построении модели | удалить столбец
Platform | предназначенная платформа | str | номинальная | - | -
Year_of_Release | год выпуска | float | интервальная | тип данных: float | перевод в целое число
Genre | жанр видеоигры | str | номинальная | - | -
Publisher | издатель видеоигры | str | номинальная | - | -
NA_Sales | количество проданных единиц в Северной Америке (в миллионах) | float | относительная | - | -
EU_Sales | количество проданных единиц в Европе (в миллионах) | float | номинальная | - | -
JP_Sales | количество проданных единиц в Японии (в миллионах) | float | номинальная | - | -
Other_Sales | количество проданных единиц в других регионах (в миллионах)| float| номинальная | - | -
Global_Sales | количество проданных единиц в мире (в миллионах)|float|номинальная | - | -
Critic_Score | оценка критиков | float | относительная | - | -
Critic_Count | количество критиков | float | относительная | не нужно использовать при построении модели | удалить столбец
User_Score | оценка пользователей | str | относительная | тип даннх: str | перевод в число
User_Count | количество пользователей | float | относительная | не нужно использовать при построении модели | удалить столбец 
Developer | разработающая компания | str | номинальная | не нужно использовать при построении модели | удалить столбец
Rating | рейтинг | str | номинальная | - | -
"""

import pandas as pd
import missingno as msno

df = pd.read_csv('video_games_sales.csv')
df.head()

df.dtypes

"""**Удалить столбец**"""

df.drop('Name', inplace=True, axis=1)
df.drop('Critic_Count', inplace=True, axis=1)
df.drop('User_Count', inplace=True, axis=1)
df.drop('Developer', inplace=True, axis=1)

df.head()

"""**Столбец Year_of_Release**"""

df["Year_of_Release"] = df["Year_of_Release"].astype('Int64')
df.head()

"""**Столбец User_Score**"""

df['User_Score'].unique()

import numpy as np

df['User_Score'] = df['User_Score'].replace("tbd", np.nan)

df['User_Score'].unique()

df['User_Score'] = df['User_Score'].astype(float)

"""**Обработка пустых ячеек**"""

df.head()

cols = list(df.columns)
df_na = {col: list(pd.isna(df[col])).count(True) for col in cols}
df_na

"""**Удаление соответствующих строк**


"""

sales_stat = {"min": df["Global_Sales"].min(), 
            "max": df["Global_Sales"].max(), 
            "mean": df["Global_Sales"].mean(),
            "median": df["Global_Sales"].median(),
            "mode": df["Global_Sales"].mode().to_list(),
            "std": df["Global_Sales"].std(ddof=0),
            "range": df["Global_Sales"].max() - df["Global_Sales"].min(),
            }
sales_stat

df.dropna(subset = ["Genre"], inplace=True)
df.dropna(subset = ["Year_of_Release"], inplace=True)
df.dropna(subset = ["Publisher"], inplace=True)

sales_stat = {"min": df["Global_Sales"].min(), 
            "max": df["Global_Sales"].max(), 
            "mean": df["Global_Sales"].mean(),
            "median": df["Global_Sales"].median(),
            "mode": df["Global_Sales"].mode().to_list(),
            "std": df["Global_Sales"].std(ddof=0),
            "range": df["Global_Sales"].max() - df["Global_Sales"].min(),
            }
sales_stat

cols = list(df.columns)
df_na = {col: list(pd.isna(df[col])).count(True) for col in cols}
df_na

"""**Заменить Nan в столбцах user count, user score, critic score с медианой**"""

df['User_Score'].replace(np.NaN, df['User_Score'].median(), inplace=True)
df['Critic_Score'].replace(np.NaN, df['Critic_Score'].median(), inplace=True)

df.head()

import seaborn as sns

import matplotlib.pyplot as plt

corrMatrix = df.corr()
sns.heatmap(corrMatrix, annot=True)
plt.show()

