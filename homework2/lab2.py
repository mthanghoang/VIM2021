# -*- coding: utf-8 -*-
"""Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vJenzDFF-Zc5COj0v0yQKbd8vMEU3vGY

Ссылка на датасе: https://www.kaggle.com/kashnitsky/mlcourse?select=video_games_sales.csv
"""

import pandas as pd

df = pd.read_csv('video_games_sales.csv')
df.head()

df.shape

df.size

df.dtypes

cols = list(df.columns)
cols

df_na = {col: list(pd.isna(df[col])).count(True) for col in cols}
df_na

df = df.dropna(axis = 0)

df_na = {col: list(pd.isna(df[col])).count(True) for col in cols}
df_na

df.shape

df.head()

"""**2. Продажа видеоигр по регионе**"""

NA = df["NA_Sales"].sum()
EU = df["EU_Sales"].sum()
JP = df["JP_Sales"].sum()
Other = df["Other_Sales"].sum()
Global = df["Global_Sales"].sum()

Region_Sales = pd.DataFrame(
    {"Sales": [Other, JP, EU, NA]}, 
    index=["Other", "JP", "EU", "NA"])
Region_Sales.sort_values(by='Sales', ascending=True).plot(kind="barh")

"""**3. Продажа игр по жанру**"""

df.groupby(['Genre']).sum().sort_values(by='Global_Sales', ascending=True).plot(kind='barh', y = 'Global_Sales')

df.groupby(['Genre']).sum().sort_values(by='Global_Sales', ascending=True).plot(kind='pie', y='Global_Sales', figsize=(15,12), autopct='%1.1f%%')

"""**4. Продажа игр по году выпуска**"""

df.groupby(['Year_of_Release']).sum().plot(kind='barh', y='Global_Sales',figsize=(8,6))

"""**5. Выпуск игр по году.**"""

year_data = {year: df["Year_of_Release"].to_list().count(year) for year in set(df["Year_of_Release"])}

year_df = pd.DataFrame.from_dict(data=year_data, orient="index", columns=["Number of Games"])

year_df.plot()

"""**6. Выпуск игр по жанру**"""

df["Genre"].value_counts().sort_values().plot(kind='barh')

df["Genre"].value_counts().plot(kind='pie',autopct='%1.1f%%', figsize=(15,10))

"""**7. Выпуск популярных жанров по году**"""

action_df = df.loc[df["Genre"] == "Action"]

shooter_df = df.loc[df["Genre"]=="Shooter"]

sports_df = df.loc[df["Genre"]=="Sports"]

action_data = {year: action_df["Year_of_Release"].to_list().count(year) for year in set(action_df["Year_of_Release"])}
to_add_action_data = {year: 0 for year in set(df["Year_of_Release"]) if year not in set(action_df["Year_of_Release"])}
action_data.update(to_add_action_data)
year_action_df = pd.DataFrame.from_dict(data=action_data,
                                        orient="index", 
                                  columns=["Action games"])
year_action_df = year_action_df.sort_index(axis=0)

shooter_data = {year: shooter_df["Year_of_Release"].to_list().count(year) for year in set(shooter_df["Year_of_Release"])}
to_add_shooter_data = {year: 0 for year in set(df["Year_of_Release"]) if year not in set(shooter_df["Year_of_Release"])}
shooter_data.update(to_add_shooter_data)
year_shooter_df = pd.DataFrame.from_dict(data=shooter_data, 
                                  orient="index", 
                                  columns=["Shooter games"])
year_shooter_df = year_shooter_df.sort_index(axis=0)

sports_data = {year: sports_df["Year_of_Release"].to_list().count(year) for year in set(sports_df["Year_of_Release"])}
to_add_sports_data = {year: 0 for year in set(df["Year_of_Release"]) if year not in set(sports_df["Year_of_Release"])}
sports_data.update(to_add_sports_data)
year_sports_df = pd.DataFrame.from_dict(data=sports_data, 
                                  orient="index", 
                                  columns=["Sports games"])
year_sports_df = year_sports_df.sort_index(axis=0)

year_all = year_action_df.merge(year_shooter_df, left_index=True, right_index=True)
year_all = year_all.merge(year_sports_df, left_index=True, right_index=True)
year_all

year_all.plot()

"""**8. Количество игр по рейтингу**"""

df["Rating"].value_counts().plot(kind='barh')

sub_df = df.loc[(df["Rating"] == "E10+") | (df["Rating"] == "M") | (df["Rating"] == "E") | (df["Rating"] == "T")]

sub_df["Rating"].value_counts().plot(kind='pie',autopct='%1.1f%%', figsize=(5,5))

sub_df["Rating"].value_counts().plot(kind='barh')

"""**9. Соответственность оценки критиков и оценки пользователей по жанру**"""

df.head()

df['User_Score'] = df['User_Score'].astype(float)

df.plot.scatter(x='User_Score', y='Critic_Score')

"""**10. Продажа игр по регионе и по платформе**"""

df.head()

import matplotlib.pyplot as plt

df_grouped = df.groupby('Platform').sum()[['NA_Sales','EU_Sales','JP_Sales','Other_Sales']]
df_grouped.sort_values(by='Other_Sales', ascending=True, inplace=True)
df_grouped

fields = ['Other_Sales','JP_Sales','NA_Sales','EU_Sales']
colors = ['#1D2F6F', '#8390FA', '#6EAF46', '#FAC748']
labels = ['Others','JP','NA', 'EU']
# figure and axis
fig, ax = plt.subplots(1, figsize=(12, 10))
# plot bars
left = len(df_grouped) * [0]
for idx, name in enumerate(fields):
    plt.barh(df_grouped.index, df_grouped[name], left = left, color=colors[idx])
    left = left + df_grouped[name]
plt.legend(labels, bbox_to_anchor=([0.55, 1, 0, 0]), ncol=4, frameon=False)